FORMAT: 1A
HOST: http://localhost:3000/

# GZApi

В этой документации описаны все API методы приложения, необходимые используемые для визуального отображения.

Все методы веб сервера работают ТОЛЬКО в формате JSON

Большинство методов, предназначенных для работы с ресурсами, соответсвуют спецификации JSON API. Такие методы имеют тип данных `application/vnd.api+json` и отличительную структуру

Подробнее:
https://braintent.gitbooks.io/goznak-docs/content/controllers.html

## Data Structures

## AllowedOperationIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `allowed_operations`

## AllowedOperation
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `allowed_operations`
+ attributes
    + name: `Add Comment` - имя действия.
    + name_ru: `Добавить комментарий` - имя действия на русском.
    + built_in_operation_name: `add_comment` - имя соответсвующего встроенного действия из DV, если оно определено.


## UserAttributes (object)
+ account_name: 'ACCOUNT\test' (string, required)

## UserAuthAttributes (object)
+ Include: UserAttributes
+ password: sekr3t (string)

## PreferredEmployee
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `preferred_employees`
+ attributes
    + use_count: 1 - количество использований
    + field_type: `performer` - тип поля для заполнения
+ relationships
    + employee (EmployeeIdentifier)


## EmployeeAttributes
+ first_name: `Сергей`
+ last_name: `Васильевич`
+ middle_name: `Иванови`
+ display_string: `Васильев С. И.`
+ gender: `Пол` - может быть male, female и none

## EmployeeRelationships
+ department (object)
  + data (DepartmentIdentifier)

## EmployeeIdentifierAttributes
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)

## EmployeeIdentifier
+ data (object)
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
    + type: `employees` (string, required)

## Employee (object)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)
+ attributes (EmployeeAttributes)

## EmployeeExpandedForDeputy (object)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)
+ attributes (EmployeeAttributes)
    + position: `должность`

## EmployeeSearchSerialized (object)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)
+ attributes (EmployeeAttributes)
    + position: `должность`

## EmployeeShowSerialized (object)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)
+ attributes (EmployeeAttributes)
    + position: `должность`
    + phone: `884-1311-11` - телефон (внутренний)
    + room_number: `228` - номер кабинета
    + email: `email@email.email` - email
+ relationships
    + unit  - подразделение
        + data (DepartmentIdentifier)
    + company  - компания
        + data (DepartmentIdentifier)

## EmployeeWithDepartment (Employee)
+ relationships (EmployeeRelationships)

## TaskCardCommentsIdentifierAttributes
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: task_card_comments (string, required)

## TaskCardCommentCreateParams
+ data
    + type: task_card_comments (string, required)
    + attributes
        + content: `Текст комментария` (string, required)


## TaskCardCommentWithAuthor
+ id:`AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_comments (string, required)
+ attributes (object)
    + content: `Текст комментария` (string, required)
    + creation_date: `Дата создания комментария` (string, required)
+ relationships
    + author (EmployeeIdentifier)
     

## TaskCardIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: task_cards (string, required)

## TaskCardPerformParams
+ data
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
    + type: `task_cards`
    + attributes
        + content: `Тест заполненности полей` (string, required)
        + end_date: `2016-11-22T12:22:00` (string, required)
    + relationships (TaskCardCreateRelationships)

## TaskCardCreateRelationships
+ author (EmployeeIdentifier)
+ controller (EmployeeIdentifier)
+ performers 
    + data (array[EmployeeIdentifierAttributes]) - может быть множественным, если пусты соисполнтели
+ co_performers 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ acquaintances 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
<!--+ references-->
<!--    + data (array[CardReferenceIdentifier, CardReferenceIdentifier])-->


## TaskCardTreeListData
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: 'task_cards' (string, required)
+ attributes 
    + description: `Задание на исполнение Поручение от 09.09.2016` (string, required)
    + card_kind_name: `Тип карточки` (string)
    + card_kind_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string)
    + state_default_name: `Started` (string, required)
    + collaborators_task: true (boolean)
+ relationships (TaskCardTreeListRelationships)


## TaskCardTreeListRelationships
+ performers 
    + data (array[EmployeeIdentifierAttributes])
+ operative_parent_task
    + data 
        + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
        + type: 'task_cards' (string, required)


## TaskCardListData
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: 'task_cards' (string, required)
+ attributes 
    + description: `Задание на исполнение Поручение от 09.09.2016` (string, required)
    + content: `Тест заполненности полей` (string, required)
    + card_kind_name: `Тип карточки` (string)
    + card_kind_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string)
    + state_default_name: `Started` (string, required)
    + start_date: `2016-10-21T00:00:00.000Z` (string, required)
    + collaborators_task: true (boolean)
    + end_date: `2016-10-21T00:00:00.000Z` (string, required)
    + shared: false (boolean) - Распределено или нет
    + end_date_actual: `2016-10-21T00:00:00.000Z` (string, required)
    + unread: true (boolean) - не прочитано текущим пользователем
    + controlled: true (boolean) - на контроле
    + added_to_favorites_at: `2016-10-21T00:00:00.000Z` (string, required)
+ relationships (TaskCardListRelationships)

## TaskCardListRelationships
+ author (EmployeeIdentifier)
+ controller (EmployeeIdentifier)
+ performers 
    + data (array[EmployeeIdentifierAttributes]) - может быть множественным, если пусты соисполнтели
+ co_performers 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ acquaintances 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])

## TaskCardListIncluded
+ included (array[Employee, Employee, Employee] )

## TaskCardShowAttributes
+ description: `Задание на исполнение Поручение от 09.09.2016` (string, required)
+ content: `Тест заполненности полей` (string, required)
+ card_kind_name: `Тип карточки` (string)
+ card_kind_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string)
+ state_default_name: `Started` (string, required)
+ start_date: `2016-10-21T00:00:00.000Z` (string, required)
+ collaborators_task: true (boolean)
+ end_date_actual: `2016-10-21T00:00:00.000Z` (string, required)
+ end_date: `2016-10-21T00:00:00.000Z` (string, required)
+ shared: false (boolean) - Распределено или нет

## TaskCardShowRelationships
+ author (EmployeeIdentifier)
+ controller (EmployeeIdentifier)
+ comments 
    + data (array[TaskCardCommentsIdentifierAttributes, TaskCardCommentsIdentifierAttributes])
+ cycles 
    + data (array[TaskCardCycleIdentifierAttributes, TaskCardCycleIdentifierAttributes])
+ performers 
    + data (array[EmployeeIdentifierAttributes]) - может быть множественным, если пусты соисполнтели
+ co_performers 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ acquaintances 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ references
    + data (array[CardReferenceIdentifier, CardReferenceIdentifier])
+ allowed_operations
    + data (array[AllowedOperationIdentifier, AllowedOperationIdentifier])


## TaskCardCycleIdentifierAttributes
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_cycles (string, required)


## TaskCardCycle
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_cycles (string, required)
+ attributes
    + Number: 1 (string, required)
    + Executer: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + Date: `2007-01-01 000000 UTC` (string, required)
    + Decision: `Текст - название состояния`
    + Comment: `Комментарий - отчет`
+ relationships
    + executer
        + data (EmployeeIdentifierAttributes)
    + references
        + data (array[CardReferenceIdentifier, CardReferenceIdentifier])
    
## TaskCardPresetIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_presets (string, required)

## TaskCardCompletionPresetIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_preset_completion_presets (string, required)

## TaskCardPreset
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_presets (string, required)
+ relationships
    + completion_preset (TaskCardCompletionPresetIdentifier)

## TaskCardCompletionPreset
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_preset_completion_presets (string, required)
+ attributes
    + report_required: false

## GroupSearchSerialized
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `groups`
+ attributes
    + name: `Лучшие люди` - название группы

## DepartmentIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: departments (string, required)

## DepartmentInfo
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `departments`
+ attributes
    + name: `ООО «Глазовский завод «Химмаш»` - название подразделения

## DepartmentSearchSerialized
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `departments` (string, required)
+ attributes
    + name: `ООО «Глазовский завод «Химмаш»` - название подразделения



## TaskAvailableAction
+ name: `Reject` (string, required) - Стаднартное имя операции. Встречается на английском
+ name_ru: `Отклонить` (string) - Имя операции на русском
+ built_in_operation_name: `edit` (string) - Имя связанной встроенной в DV операции
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)

## TaskOperationsPattern
+ name: `Edit` (string, required) - Стаднартное имя операции. Встречается на английском
+ name_ru: `Редактировать` (string) - Имя операции на русском
+ built_in_operation_name: `edit` (string) - Имя связанной встроенной в DV операции
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)



## VersionedCardRelationInfo
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `versioned_file_cards`
+ attributes
    + description: `Имя файла.формат` (string, required)
    + file_name: `Имя файла.формат` (string, required)
    + current_version_number: `1` (string, required)
    + current_version_file_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)

## DocumentCardReferenceRelationInfoFile
+ id: `99BF9654-7389-E611-80AD-0800278BDFDD` (string, required)
+ type: `document_cards` (string, required)
+ attributes
    + description:         `Имя файла.формат` (string, required)
    + card_kind_name:      `Файл` (string, required)
    + card_kind_id:        `F9A8D158-9884-4765-859D-31C4EFCA149D` (string, required)
    + state_default_name:  `Created` (string, required)
+ relationships 
    + file_cards 
        + data (array[VersionedFileCardIdentifier])


## VersionedFileCardIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: versioned_file_cards (string, required)


## DocumentCardIdentifier   
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: document_cards (string, required)


## CardReferenceIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `reference_list_card_references`

## CardReferenceLinkCreateDescription (CardReferenceIdentifier)
+ attributes
  + type_name: `КЗ_ДополненияФайлыОтчет` (string)
  + type_description: `Дополнительные файлы` (string)
  + creation_date: `2007-01-01 000000 UTC`  - сейчас возвращается null из-за кривого sql adapter
+ relationships
    + destination_card
      + data (DocumentCardIdentifier)
+ included (array[DocumentCardReferenceRelationInfoFile, VersionedCardRelationInfo]) 

## CardReferenceLinkDescriptionExample1 (CardReferenceIdentifier)
+ attributes
  + type_name: `КЗ_ДополненияФайлыОтчет` (string)
  + type_description: `Дополнительные файлы` (string)
  + creation_date: `2007-01-01 000000 UTC`  - дата создания
+ relationships
    + destination_card 
        + data (DocumentCardIdentifier)


## CardReferenceLinkDescriptionExample2 (CardReferenceIdentifier)
+ attributes
  + type_name: `КЗ_Основной документ` (string)
  + type_description: `Основной документ` (string)
  + creation_date: `2007-01-01 000000 UTC`  - сдата создания
+ relationships
    + destination_card 
        + data (DocumentCardIdentifier)



## CardRoles
+ name: `Название роли` (string, required)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)

## TaskCardWithActions
+ data (object)
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + type: 'task_cards' (string, required)
    + attributes (TaskCardShowAttributes)
    + relationships (TaskCardShowRelationships)
+ included (array[Employee, Employee, DepartmentInfo, CardReferenceLinkDescriptionExample1, CardReferenceLinkDescriptionExample2, DocumentCardReferenceRelationInfoFile, DocumentCardReferenceRelationInfoFile, VersionedCardRelationInfo, TaskCardCycle, TaskCardCycle, TaskCardCommentWithAuthor, TaskCardCommentWithAuthor, AllowedOperation, AllowedOperation])


## TaskCardWithActionsDelegation
+ data (object)
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + type: 'task_cards' (string, required)
    + attributes (TaskCardShowAttributes)
    + relationships (TaskCardShowRelationships)
+ included (array[Employee, Employee, DepartmentInfo, CardReferenceLinkDescriptionExample1, CardReferenceLinkDescriptionExample2, DocumentCardReferenceRelationInfoFile, DocumentCardReferenceRelationInfoFile, VersionedCardRelationInfo, AllowedOperation, AllowedOperation])


## TaskCardAfterTemplateCreate
+ data (object)
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + type: 'task_cards' (string, required)
    + attributes (TaskCardShowAttributes)
    + relationships 
        + author 
            - data (object, optional, nullable)
        + controller 
            - data (object, optional, nullable)
        + cycles 
            + data (array[])
        + performers 
            + data (array[])
        + co_performers 
            + data (array[])
        + acquaintances 
            + data (array[])

# Group Пользователи

## Сессии [/users/sign_in]
#### Создать сессию [POST]

+ Request (application/json)

        {
            "account_name": "DOCSVISION\\dv",
            "password": "12345678"
        }

+ Response 201 (application/json)

    + Headers

            Access-Token:Ly2s3IWFvEJWNSlgr0BlSg
            Client:57sggIs-NRwfnv2oe5dKcg
            Etag:W/"43c2f9eabb3ecef557ff77804a90f79b"
            Expiry:1471867003
            Token-Type:Bearer
            Uid:5

    + Body

            {
                "data":{
                    "id":1,
                    "employee_id":"d70f6f76-f047-4daf-9fac-72acb68f0338"
                }
            }
            
            

# Group Администраторы

## Авторизация [/admins/sign_in]

#### Создать сессию [POST]

+ Request (application/json)

        {
            "login": "superadmin",
            "password": "12345678"
        }

+ Response 201 (application/json)

    + Headers

            Access-Token:4yzt0hS8ZPTeZWvCrO5dQQ
            Client:G24hRw_GOnm-vDSP14VxVw
            Etag:W/"a0c9026fb660a244f8b76750bc11942d"
            Expiry:1471867013
            Token-Type:Bearer
            Uid:1

    + Body

            {
                "data":{
                    "login": "superadmin",
                    "id": "1"
                }
            }
            

# Group Сотрудники

## Домашная страница [GET /staff/employees/my_page]

Вернет информацию об основном пользователе. **БЕЗ** учета замещения.
Вдобавок, в meta будут содержаться статические параметры приложения, которые необходимо показать (для всех одинаковы).

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (EmployeeExpandedForDeputy)
        + included
            + phonebook_url: `https://localhost:12345`



## Информация о сотруднике [GET /staff/employees/{id}]
- `id` ( **String**, *required* )
UUID запрашиваемого сотрудника 

Вернет развернутую информацию о сотруднике

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (EmployeeShowSerialized)
        + included (array[DepartmentInfo, DepartmentInfo])



## Поиск по справочнику сотрудников [GET /staff/search?filter={filter}&page={page}]
- `filter` ( **String**, *required* )
Фильтр по имени 
- `page` ( **String**, *required* )
Страница


Производит поиск по:

1. Сотрудникам
2. Группам
3. Подразделениям

Если не нашлось нужное количество сотрудников для страницы - пойдет искать в группах  недостающее кол-во до ON_PAGE. Так же соотв. подразделения.

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[EmployeeSearchSerialized, EmployeeSearchSerialized, GroupSearchSerialized, DepartmentSearchSerialized])


## Список замещаемых текущим пользователем [GET /staff/employees/deputized_by_me]

Вернется набор пользователей, замещаемых текущим сотрудником.

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[EmployeeExpandedForDeputy, EmployeeExpandedForDeputy])
        + included (array[DepartmentInfo, DepartmentInfo])


## Сотрудники быстрого выбора [GET /staff/employees/preferred_employees]
Вернет список сотрудников быстрого выбора, включая количество использований, типы полей и ссылки на сотрудников
Метод **УЧИТЫВАЕТ** замещение. При указании замещения - вернет список для замещаемого

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[PreferredEmployee, PreferredEmployee])
        + included (array[Employee, Employee])


## Изображение [/staff/employees/{employee_id}/photo]
- `employee_id` ( **String**, *required* )
ID сотрудника

### Получить [GET]

+ Response 200 (text/plain)

        Ok.

# Group Группы

## Получить всех участников [GET /staff/groups/{id}/participants]
- `id` ( **String**, *required* )
ID группы

Включает сотрудников всех дочерних групп с учетом флага 'Не отображать при выборе'

+ Request (application/vnd.api+json)

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[EmployeeSearchSerialized, EmployeeSearchSerialized])


# Group Подразделения

## Получить всех участников [GET /staff/departments/{id}/participants]
- `id` ( **String**, *required* )
ID группы

Включает сотрудников всех дочерних подразделений с учетом флага 'Не отображать при выборе'

+ Request (application/vnd.api+json)

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[EmployeeSearchSerialized, EmployeeSearchSerialized])



# Group Карточки

## Описание 

Общие методы, доступные всем карточкам в системе


## Добавление в избранное  [/cards/{id}/add_to_favorites]

### Добавить [PATCH]
На данный момент доступно только для карточек видов: `Задание`; `Документ`.

При использовании данного метода требуется доступ к операции чтения (*Read*) карточки.

- `id` ( **String**, *required* )
Уникальный ID карточки (`InstanceID` карточки)

+ Request (application/vnd.api+json)

+ Response 204 (application/vnd.api+json)


## Удаление из избранного  [/cards/{id}/remove_from_favorites]

### Удалить [PATCH]
На данный момент доступно только для карточек видов: `Задание`; `Документ`.

При использовании данного метода требуется доступ к операции чтения (*Read*) карточки.


- `id` ( **String**, *required* )
Уникальный ID карточки (`InstanceID` карточки)

+ Request (application/vnd.api+json)

+ Response 204 (application/vnd.api+json)


## Список избранного  [/cards/favorites?page={page}]
### Описание
Вернет список избранных карточек. На данный момент:
* Карточка вида `Задание` будет сериализоваться точно так же (в т.ч. с теми же included), как и в меоде `Список заданий`.
* У карточки вида `Документ` будут выдаваться только самые основные свойства.

### Получить [GET]
- `page` ( **String** )
Номер страницы. Сейчас на странице показывается 50 элементов и сортировка идёт по дате добавление в избранное `FoldersDir::Folder::Shortcut.CreationDateTime`

+ Request (application/vnd.api+json)

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[TaskCardListData, TaskCardListData])
        + included (array[Employee, Employee, Employee] 




# Group Задания

## Список заданий [/task_cards/?list={list}&status={status}&page={page}]

- `list` ( **String**, *required* )

### Описание
Определяет вид листа, который нужно получить.

На данный момент доступны следующие листы (В таблице после параметра и описания указаны условия соответсвия листу): 
| Параметр            | Описание             | Тип задания   | Распределено | В состоянии                               | Сотрудник, один из: |
| -                   | -                    | -             | -   | -                                                  | - |
| mine                | Выданные мной        | на исполнение | -   | 'Started', 'In work', 'Not accepted', 'Acceptance' | А |
| todo                | Мне сделать          | исп, рассм    | нет | 'Started', 'In work', 'Not accepted', 'Acceptance' | И, С, К, О  |
| commissions_perform | Исполнение поручений | на исполнение | нет | 'Started', 'In work'                               | И, С |
| commissions_rework  | Доработка поручений  | на исполнение | нет | 'Not accepted'                                     | И, С |
| commissions_check   | Контроль поручений   | на исполнение | нет | 'Acceptance'                                       | К |
| informing           | Ознакомление         | на ознакомл.  | нет | 'Started', 'In work'                               | И, С |
| shared              | Распределены         | исп, рассм    | да  | 'Started', 'In work'                               | И, С |
| completed           | Завершены            | все           | нет | 'Completed'                                        | И, С, К, О, А |
| consideration       | Рассмотрение         | на рассмотр.  | нет | 'Started'                                          | И, С |
| approval            | Согласование         | cогласование  | нет | 'Started'                                          | И, С |
| signing             | Подписание           | подписание    | нет | 'Started'                                          | И, С |
| docs_rework         | Доработка документов | доработка     | нет | 'Started'                                          | И, С |

Все листы сортируются по **дате создания карточки**, кроме completed в нём - по **дате завершения**

Сокращения названий роли сотрудника, применяемые в таблице:
| Обозначение | Расшифровка |
| - | - |
| И | Исполнитель     |  
| С | Соисполнитель   | 
| А | Автор           | 
| О | На ознакомление | 
| К | Контролер       | 
- `page` ( **String** )

Номер страницы. Сейчас на странице показывается 50 элементов и сортировка идёт по дате создания карточки `dvsys_instances.CreationDateTime`
В случаях если он не задан или задан не верно (меньше еденицы, не цифровым значением) - `page` принимается за 1

- `status` ( **Array** )
При помощи данного параметра можно определить массив свойств, по которым нужно фильтровать список:

Возможна филтьтрация по полям:

1. Status: 
    1. expired    - просрочено
    2. expiring   - подходит срок
    3. controlled - на контроле

Ответ содержит список заданий. 
Для каждого задания кроме основной информации посылаются необходимые для отображения зависимости, а именно - лист сотрудников, являющихся участниками задания.

**Основной документ**
Список включает основные документы к каждому заданию, причем для каждого документа будет свой сериализатор.
Основной документ включается, как и при Show - в references. **но, в данном случае в references будет только один основной документ**

В атрибутах основного документа, кроме всего прочего, в параметре `parent_card_kind_name` включается родительский тип, например: "Служебные записки", "Распорядительные документы".

Краткая справка по дополнительным элементам сериализации документов из списка задач, готовым на данный момент.
| Тип документа | Что включает | 
| - | - | 
| Все | имя, содержание, имя дела, имя родительского типа, кол-во страниц, кол-во страниц в приложении. |
| РД | Имя типа документа (doc_type. В DV показывается как `тип распоряжения`, `тип указания` и прочее, в зависимости от  типа карточки документа) |
| СЗ | Получатели |
| Исходящий | Получатели (тип отправления, компания, сотрудник => должность), тип дублирования |
| Входящий | Отправитель (компания, сотрудник => должность), вложение |
| Универсальный документ | Имя типа универсального документа (doc_type) |
| Протокол | Тип совещания |



### Получить [GET]
+ Request  (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)

    + Attributes
        + data (array[TaskCardListData, TaskCardListData])
        + included (array[Employee, Employee, Employee] )


## Задание [/task_cards/{id}/]

- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

### Получить информацию по заданию [GET]
#### Описание
При открытии еденичного задания информация схожа с той, что выдается к списку заданий, дополненная следующими элементами:
* Список возможных действий над поручением
* Список доступных прав для текущего пользователя
* Список комментариев
* Ход исполнения (?)

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)

    + Attributes (TaskCardWithActions)



### Удалить задание [DELETE]

#### Описание
Допустимо только для шаблона

+ Request (application/vnd.api+json)

+ Response 204


## Комментирование [/task_cards/{id}/comments]
### Добавить комментарий [POST]

+ Request (application/vnd.api+json)

    + Attributes (TaskCardCommentCreateParams)
        
+ Response 201 (application/vnd.api+json)

    + Headers

            Access-Token:4yzt0hS8ZPTeZWvCrO5dQQ
            Client:G24hRw_GOnm-vDSP14VxVw
            Etag:W/"a0c9026fb660a244f8b76750bc11942d"
            Expiry:1471867013
            Token-Type:Bearer
            Uid:1

    + Attributes
        + data (TaskCardCommentWithAuthor)
        + included (Employee)

## Шаблон задания. Создание поручения  [/task_cards/assignment_template]

### Описание 
Что бы создать задание типа `Поручение` необходимо сначала создать шаблон.  В ответе вернется ID созданного шаблона задания.
Теперь к этому шаблону можно отправлять связки. (Файлы)
Далее необходимо отправить шаблон в работу. Это действие требует корректную отправку заполненных в UI данных поручения.


### Создание шаблона с типом Поручение  [POST]

+ Request (application/vnd.api+json)

+ Response 201 (application/vnd.api+json)

    + Headers

    + Attributes (TaskCardAfterTemplateCreate)
            

## Отправка шаблона в работу  [/task_cards/{id}/send_assignment_to_perform]

### Отправить [PATCH]

- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

+ Request (application/vnd.api+json)

    + Attributes (TaskCardPerformParams)

+ Response 200 (application/vnd.api+json)

    + Headers

    + Attributes (TaskCardWithActions)

## Дерево заданий [/task_cards/{id}/task_tree]
- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

### Построить [GET]

### Описание 
Метод возвращает список заданий: 
* В случае если исходное задание по документу (имеет ссылку ГЗ_Основной_документ)
Будет приведено дерево заданий для документа, где может быть несколько корневых задач (выданных из БП, обрабатывающих документы)
* В случае если исходное задание без документа (не имеет ссылки ГЗ_Основной_документ) будет найдено корневое родительское задание
и дерево будет построено от него.


Информация о задании содержит ограниченный набор атрибутов с двумя связками:
* Исполнители.
* Родительское *оперативное* задание `operative_parent_task`. *Оперативным* оно названо потому, что здесь пропущены связки с родительскими заданиями видов `Поручение` и `Длительное поручение`, которые не нужны при отображени дерева. У заданий довольно часто есть родительское задание типа `Поручение` и `Длительное поручение` из которых бизнес-процессы системы выдают *оперативные* задания, например `На исполнение`.
У корневых заданий `operative_parent_task` отсутствует

+ Request (application/vnd.api+json)


+ Response 200 (application/vnd.api+json)

    + Headers

    + Attributes
        + data (array[TaskCardTreeListData, TaskCardTreeListData])
        + included (array[Employee, Employee, Employee] )


## Действие над заданием [/task_cards/{id}/operation/{operation_id}?report={report}]
- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

- `operation_id` ( **String**, *required* )
Уникальный ID операции (StatesDir::CardKindSettings::Operation)

- `report` ( **String** )
Текст отчета о выполнении, если требуется.

### Вызов действия DV [PATCH]
+ Request (application/json)

+ Response 204 (application/json)

## Распределение задания [/task_cards/{id}/delegation_template]
- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

### Получить шаблон распределенного задания [POST]

Метод инициирует создание дочернего задания. 
См. раздел ['Распределение задания'](https://braintent.gitbooks.io/goznak-docs/content/zadaniya__logika_i_arhitektura.html)

Вернется шаблон с предварительно заполненными данными - ссылками, preset'ами и др.
Этот шаблон необходимо так же, как и простой шаблон 'Задание', послать в работу или удалить.

+ Request (application/vnd.api+json)

+ Response 201 (application/vnd.api+json)

    + Headers

    + Attributes (TaskCardWithActionsDelegation)


## Файл задания [/task_cards/{id}/files]
- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

Файлы задания - это карточки документа с типом `Файл`, которые привязаны через список ссылок карточки заданий ссылкой определнного типа.

Добавление могло бы происходить в два шага: 

1. Создание документа типа `Файл`
2. Добавление определенного типа ссылки на новый документ.

Однако, в этом случае, пользователь сможет заливать ни к чему не привязанные файлы, 
по этой причине добавление файла и создание ссылки сделано в едином  методе. 

Файл, на данный момент, заливается способом `multipart/form-data`
Ответ приходит в форме JSON API.

### Добавление [POST]
+ Request (multipart/form-data; boundary=---BOUNDARY)

    + Headers 

            Accept: application/vnd.api+json

+ Response 201 (application/vnd.api+json)

    + Headers

    + Attributes 
        + data (CardReferenceLinkCreateDescription)

## Удаление файла задания [/task_cards/{id}/files/{file_doc_id}]
### Удаление [DELETE]
- `file_doc_id` ( **String**, *required* )
ID карточки документа, которую необходимо удалить

+ Request (application/vnd.api+json)

    + Headers 

            Accept: application/vnd.api+json

+ Response 204 (application/json)

# Group Карточки файла с версиями

## Описание


## Файл [/versioned_file_cards/{id}/file]
### Получить [GET]
- `id` ( **String**, *required* )

Вернет файл - представляющий текущую версию `Карточка файла с версиями`, 
с определенными по формату файла заголовками `Content-Type`, `Content-Disposition` и др.

## Файл, конвертированный в PDF [/versioned_file_cards/{id}/file/pdf]

### Получить [GET]
- `id` ( **String**, *required* )

Вернет тот же файл, что и предыдущий метод, только в формате PDF (конвертируется с помощью LibreOffice)


# Group Иное

То, что пока не вошло в какой-либо раздел