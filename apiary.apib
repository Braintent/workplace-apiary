FORMAT: 1A
HOST: http://localhost:3000/

# GZApi

В этой документации описаны все API методы приложения, необходимые используемые для визуального отображения.

Все методы веб сервера работают ТОЛЬКО в формате JSON

Большинство методов, предназначенных для работы с ресурсами, соответсвуют спецификации JSON API. Такие методы имеют тип данных `application/vnd.api+json` и отличительную структуру

Подробнее:
https://braintent.gitbooks.io/goznak-docs/content/controllers.html

## Data Structures

## UserAttributes (object)
+ account_name: 'ACCOUNT\test' (string, required)

## UserAuthAttributes (object)
+ Include: UserAttributes
+ password: sekr3t (string)

## EmployeeAttributes
+ first_name: `Сергей`
+ last_name: `Васильевич`
+ middle_name: `Иванови`
+ display_string: `Васильев С. И.`

## EmployeeRelationships
+ department (object)
  + data (DepartmentIdentifier)

## EmployeeIdentifierAttributes
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)

## EmployeeIdentifier
+ data (object)
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
    + type: `employees` (string, required)

## Employee (object)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `employees` (string, required)
+ attributes (EmployeeAttributes)

## EmployeeWithDepartment (Employee)
+ relationships (EmployeeRelationships)

## TaskCardCommentsIdentifierAttributes
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: task_card_comments (string, required)

## TaskCardCommentCreateParams
+ data
    + type: task_card_comments (string, required)
    + attributes
        + content: `Текст комментария` (string, required)


## TaskCardCommentWithAuthor
+ id:`AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: "task_card_comments" (string, required)
+ attributes (object)
    + content: `Текст комментария` (string, required)
    + creation_date: `Дата создания комментария` (string, required)
+ relationships
    + author (EmployeeIdentifier)
     

## TaskCardIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: task_cards (string, required)

## TaskCardPerformParams
+ data
    + content: `Тест заполненности полей` (string, required)
    + end_date: `2016-10-21T00:00:00.000Z` (string, required)
    + relationships (TaskCardCreateRelationships)

## TaskCardCreateRelationships
+ author (EmployeeIdentifier)
+ controller (EmployeeIdentifier)
+ performer (EmployeeIdentifier)
+ co_performers 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ acquaintances 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
<!--+ references-->
<!--    + data (array[CardReferenceIdentifier, CardReferenceIdentifier])-->



## TaskCardListData
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: 'task_cards' (string, required)
+ attributes 
    + description: `Задание на исполнение Поручение от 09.09.2016` (string, required)
    + content: `Тест заполненности полей` (string, required)
    + card_kind_name: `Тип карточки` (string)
    + card_kind_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string)
    + state_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + state_name: `Не начато` (string, required)
    + state_default_name: `Started` (string, required)
    + start_date: `2016-10-21T00:00:00.000Z` (string, required)
    + crereation_date_time: `2016-10-21T00:00:00.000Z`,
    + change_date_time: `2016-10-21T00:00:00.000Z`,
    + collaborators_task: true (boolean)
    + end_date: `2016-10-21T00:00:00.000Z` (string, required)
    + parent_document_type: `Тип родительского документа`
    + unread: true (boolean)
+ relationships (TaskCardListRelationships)

## TaskCardListRelationships
+ author (EmployeeIdentifier)
+ controller (EmployeeIdentifier)
+ performer (EmployeeIdentifier)
+ co_performers 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ acquaintances 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])

## TaskCardListIncluded
+ included (array[Employee, Employee, Employee] )

## TaskCardShowAttributes
+ description: `Задание на исполнение Поручение от 09.09.2016` (string, required)
+ content: `Тест заполненности полей` (string, required)
+ card_kind_name: `Тип карточки` (string)
+ card_kind_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string)
+ state_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ state_name: `Не начато` (string, required)
+ state_default_name: `Started` (string, required)
+ start_date: `2016-10-21T00:00:00.000Z` (string, required)
+ crereation_date_time: `2016-10-21T00:00:00.000Z`,
+ change_date_time: `2016-10-21T00:00:00.000Z`,
+ collaborators_task: true (boolean)
+ end_date: `2016-10-21T00:00:00.000Z` (string, required)

## TaskCardShowRelationships
+ author (EmployeeIdentifier)
+ controller (EmployeeIdentifier)
+ comments (array[TaskCardCommentsIdentifierAttributes, TaskCardCommentsIdentifierAttributes])
+ cycles (array[TaskCardCycleIdentifierAttributes, TaskCardCycleIdentifierAttributes])
+ performer (EmployeeIdentifier)
+ co_performers 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ acquaintances 
    + data (array[EmployeeIdentifierAttributes, EmployeeIdentifierAttributes])
+ references
    + data (array[CardReferenceIdentifier, CardReferenceIdentifier])


## TaskCardCycleIdentifierAttributes
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_cycles (string, required)


## TaskCardCycle
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_cycles (string, required)
+ attributes
    + Number: 1 (string, required)
    + Executer: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + Date: `2007-01-01 000000 UTC` (string, required)
    + Decision: `Текст - название состояния`
    + Comment: `Комментарий - отчет`
    
## TaskCardPresetIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_presets (string, required)

## TaskCardCompletionPresetIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_preset_completion_presets (string, required)

## TaskCardPreset
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_presets (string, required)
+ relationships
    + completion_preset (TaskCardCompletionPresetIdentifier)

## TaskCardCompletionPreset
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: task_card_preset_completion_presets (string, required)
+ attributes
    + report_required: false




## DepartmentIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: departments (string, required)

## DepartmentInfo
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: departments (string, required)
+ attributes
    + name: `Имя подразделения` (string, required)


## TaskAvailableActions
+ name: `Default action name. May be eng/rus` (string, required)
+ name_ru: `Имя действия на русском` (string)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)

## TaskOperationsPattern
+ name: `Default operation name. May be eng/rus` (string, required)
+ local_name: `Имя операции на русском` (string)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)



## VersionedCardRelationInfo
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `versioned_file_cards`
+ attributes
    + description: `Имя файла.формат` (string, required)
    + file_name: `Имя файла.формат` (string, required)
    + current_version_number: `1` (string, required)
    + current_version_file_id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)

## DocumentCardReferenceRelationInfoFile
+ id: `99BF9654-7389-E611-80AD-0800278BDFDD` (string, required)
+ type: `document_cards` (string, required)
+ attributes
    + description:         `Имя файла.формат` (string, required)
    + card_kind_name:      `Файл` (string, required)
    + card_kind_id:        `F9A8D158-9884-4765-859D-31C4EFCA149D` (string, required)
    + state_id:            `E528052C-A932-4295-A5A3-7233520FAAC8` (string, required)
    + state_name:          `Создан` (string, required)
    + state_default_name:  `Created` (string, required)
+ relationships 
    + file_cards (array[VersionedFileCardIdentifier])


## VersionedFileCardIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: versioned_file_cards (string, required)


## DocumentCardIdentifier   
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
+ type: document_cards (string, required)


## CardReferenceIdentifier
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA`
+ type: `reference_list_card_references`

## CardReferenceLinkDescription (CardReferenceIdentifier)
+ attributes
  + type_name: `КЗ_ДополненияФайлыОтчет` (string)
  + type_description: `КЗ_ДополненияФайлыОтчет` (string)
  + creation_date: `2007-01-01 000000 UTC`  - сейчас возвращается null из-за кривого sql adapter
+ relationships
  + destination_card (DepartmentIdentifier)
+ included (array[DocumentCardReferenceRelationInfoFile, VersionedCardRelationInfo]) 



## CardRoles
+ name: `Название роли` (string, required)
+ id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)

## TaskCardWithActionsMeta
+ data (object)
    + id: `AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA` (string, required)
    + type: 'task_cards' (string, required)
    + attributes (TaskCardShowAttributes)
    + relationships (TaskCardShowRelationships)
+ included (array[Employee, Employee, DepartmentInfo, DocumentCardReferenceRelationInfoFile, VersionedCardRelationInfo, TaskCardCycle, TaskCardCycle, TaskCardPreset, TaskCardCompletionPreset])
+ meta (object)
    + possible_actions (array[TaskAvailableActions, TaskAvailableActions], required)
    + common_roles (array[CardRoles, CardRoles], required)
    + card_roles (array[CardRoles, CardRoles], required)
    + allowed_operations (array[TaskOperationsPattern, TaskOperationsPattern], required)



# Group Пользователи

## Сессии [/users/sign_in]
#### Создать сессию [POST]

+ Request (application/json)

        {
            "account_name": "DOCSVISION\\dv",
            "password": "12345678"
        }

+ Response 201 (application/json)

    + Headers

            Access-Token:Ly2s3IWFvEJWNSlgr0BlSg
            Client:57sggIs-NRwfnv2oe5dKcg
            Etag:W/"43c2f9eabb3ecef557ff77804a90f79b"
            Expiry:1471867003
            Token-Type:Bearer
            Uid:5

    + Body

            {
                "data":{
                    "id":1,
                    "employee_id":"d70f6f76-f047-4daf-9fac-72acb68f0338"
                }
            }
            
            

# Group Администраторы

## Авторизация [/admins/sign_in]

#### Создать сессию [POST]

+ Request (application/json)

        {
            "login": "superadmin",
            "password": "12345678"
        }

+ Response 201 (application/json)

    + Headers

            Access-Token:4yzt0hS8ZPTeZWvCrO5dQQ
            Client:G24hRw_GOnm-vDSP14VxVw
            Etag:W/"a0c9026fb660a244f8b76750bc11942d"
            Expiry:1471867013
            Token-Type:Bearer
            Uid:1

    + Body

            {
                "data":{
                    "login": "superadmin",
                    "id": "1"
                }
            }
            

# Group Сотрудники

## Поиск [GET /staff/employees/find?filter={filter}]
- `filter` ( **String**, *required* )
Строковое значение, по которому будет произведен поиск.

Вернет первых 20 сотрудинков, найденных по запросу.

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[Employee, Employee])
        + included (array[DepartmentInfo, DepartmentInfo])

## Список замещаемых текущим пользователем [GET /staff/employees/deputized_by_me]

Вернется набор пользователей, замещаемых текущим сотрудником.

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)
    + Attributes
        + data (array[Employee, Employee])
        + included (array[DepartmentInfo, DepartmentInfo])

## Изображение [GET /staff/employees/{employee_id}/photo]
- `employee_id` ( **String**, *required* )
ID сотрудника

+ Response 200 (text/plain)

        Ok.

# Group Задания

## Список заданий [GET /task_cards/?list={list}&status={status}&page={page}]

- `list` ( **String**, *required* )

Определяет вид листа, который нужно получить.

На данный момент доступны следующие листы (В таблице после параметра и описания указаны условия соответсвия листу): 
| Параметр            | Описание             | Тип задания   | Распределено | В состоянии                               | Сотрудник, один из: |
| -                   | -                    | -             | -   | -                                                  | - |
| todo                | Мне сделать          | на исполнение | нет | 'Started', 'In work', 'Not accepted', 'Acceptance' | И, С, К, О  |
| commissions_perform | Исполнение поручений | на исполнение | нет | 'Started', 'In work'                               | И, С |
| commissions_rework  | Доработка поручений  | на исполнение | нет | 'Not accepted'                                     | И, С |
| commissions_check   | Контроль поручений   | на исполнение | нет | 'Acceptance'                                       | К |
| informing           | Ознакомление         | на ознакомл.  | нет | 'Started', 'In work'                               | И, С |
| shared              | Распределены         | на исполнение | да  | 'Started', 'In work'                               | И, С |
| completed           | Завершены            | все           | нет | 'Completed'                                        | И, С, К, О, А |
| consideration       | Рассмотрение         | на рассмотр.  | нет | 'Started'                                          | И, С |
| approval            | Согласование         | cогласование  | нет | 'Started'                                          | И, С |
| signing             | Подписание           | подписание    | нет | 'Started'                                          | И, С |
| docs_rework         | Доработка документов | доработка     | нет | 'Started'                                          | И, С |

Все листы сортируются по **дате создания карточки**, кроме completed в нём - по **дате завершения**

Сокращения названий роли сотрудника, применяемые в таблице:
| Обозначение | Расшифровка |
| - | - |
| И | Исполнитель     |  
| С | Соисполнитель   | 
| А | Автор           | 
| О | На ознакомление | 
| К | Контролер       | 
- `page` ( **String** )

Номер страницы. Сейчас на странице показывается 50 элементов и сортировка идёт по дате создания карточки `dvsys_instances.CreationDateTime`
В случаях если он не задан или задан не верно (меньше еденицы, не цифровым значением) - `page` принимается за 1

- `status` ( **Array** )
При помощи данного параметра можно определить массив свойств, по которым нужно фильтровать список:

Возможна филтьтрация по полям:

1. Status: 
    1. expired    - просрочено
    2. expiring   - подходит срок
    3. controlled - на контроле

#### Описание
Ответ содержит список заданий. 
Для каждого задания кроме основной информации посылаются необходимые для отображения зависимости, а именно - лист сотрудников, являющихся участниками задания.



+ Request  (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)

    + Attributes
        + data (array[TaskCardListData, TaskCardListData])
        + included (array[Employee, Employee, Employee] )

## Задание [/task_cards/{id}/]

- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)


### Получить информацию по заданию [GET]
#### Описание
При открытии еденичного задания информация схожа с той, что выдается к списку заданий, дополненная следующими элементами:
* Список возможных действий над поручением
* Список доступных прав для текущего пользователя
* Список комментариев
* Ход исполнения (?)

+ Request (application/vnd.api+json)

    + Headers

            Authorization: Bearer <ACCESS_TOKEN>

+ Response 200 (application/vnd.api+json)

    + Attributes (TaskCardWithActionsMeta)


### Удаление [DELETE]
#### Описание
Допустимо только для шаблона

+ Request (application/vnd.api+json)

+ Response 204


## Комментирование [/task_cards/{id}/comments]
### Добавить комментарий [POST]

+ Request (application/vnd.api+json)

    + Attributes (TaskCardCommentCreateParams)
        
+ Response 201 (application/vnd.api+json)

    + Headers

            Access-Token:4yzt0hS8ZPTeZWvCrO5dQQ
            Client:G24hRw_GOnm-vDSP14VxVw
            Etag:W/"a0c9026fb660a244f8b76750bc11942d"
            Expiry:1471867013
            Token-Type:Bearer
            Uid:1

    + Attributes
        + data (TaskCardCommentWithAuthor)
        + included (Employee)

## Шаблон задания (Создание поручения) [/task_cards/assignment_template]

Что бы создать задание типа `Поручение` необходимо сначала создать шаблон.  В ответе вернется ID созданного шаблона задания.
Теперь к этому шаблону можно отправлять связки. (Файлы)
Далее необходимо отправить шаблон в работу. Это действие требует корректную отправку заполненных в UI данных поручения.


### Создание шаблона с типом Поручение  [POST]

+ Request (application/vnd.api+json)

+ Response 201 (application/vnd.api+json)

    + Headers

    + Attributes (TaskCardIdentifier)
            

### Отправка шаблона в работу  [PATCH /task_cards/{id}/send_assignment_to_perform]

- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

+ Request (application/vnd.api+json)

    + Attributes (TaskCardPerformParams)

+ Response 200 (application/vnd.api+json)

    + Headers

    + Attributes (TaskCardWithActionsMeta)


## Действие над заданием [/task_cards/{id}/operation/{operation_id}?report={report}]
- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

- `operation_id` ( **String**, *required* )
Уникальный ID операции (StatesDir::CardKindSettings::Operation)

- `report` ( **String** )
Текст отчета о выполнении, если требуется.

### Вызов действия DV [PATCH]
+ Request (application/json)

+ Response 204 (application/json)

### Файлы задания [/task_cards/{id}/files]
- `id` ( **String**, *required* )
Уникальный ID задания (`InstanceID` карточки)

Файлы задания - это карточки документа с типом `Файл`, которые привязаны через список ссылок карточки заданий ссылкой определнного типа.

Добавление могло бы происходить в два шага: 

1. Создание документа типа `Файл`
2. Добавление определенного типа ссылки на новый документ.

Однако, в этом случае, пользователь сможет заливать ни к чему не привязанные файлы, 
по этой причине добавление файла и создание ссылки сделано в едином  методе. 

Файл, на данный момент, заливается способом `multipart/form-data`
Ответ приходит в форме JSON API.

#### Добавление [POST]


+ Request (multipart/form-data; boundary=---BOUNDARY)

    + Headers 
    
            Accept: application/vnd.api+json


+ Response 201 (application/vnd.api+json)

    + Headers

    + Attributes (CardReferenceLinkDescription)

#### Удаление [DELETE /task_cards/{id}/files/{file_doc_id}]


- `file_doc_id` ( **String**, *required* )
ID карточки документа, которую необходимо удалить

+ Request (application/vnd.api+json)

    + Headers 
    
            Accept: application/vnd.api+json

+ Response 204 (application/json)